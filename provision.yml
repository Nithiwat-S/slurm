---
# create instances
- name: configuring environment
  hosts: localhost
  connection: local
  vars_files:
      - group_vars/nomad/vars
      - group_vars/nomad/secret_vars
  
  vars:
    count: '{{ client }}' # UDF
    cluster_size: '{{ client + 1}}'
       
  tasks:

  - name: creating cluster
    linode.cloud.instance:
      label: '{{ instance_prefix }}{{ item | int + 1 }}-{{ uuid }}'
      api_token: '{{ api_token }}'
      type: '{{ type }}'
      region: '{{ region }}'
      image: '{{ image }}'
      root_pass: '{{ root_pass }}'
      authorized_keys: '{{ ssh_keys }}'
      private_ip: true
      stackscript_id: '1226546'
      ua_prefix: 'marketplace-occ'      
      tags: '{{ cluster_uuid }}'
      state: present
    with_sequence: count='{{ count }}'

  - name: get info about the server instances
    linode.cloud.instance_info:
      api_token: '{{ api_token }}'
      label: '{{ instance_prefix }}{{ item | int }}-{{ uuid }}'
    register: server_info
    with_sequence: count='{{ cluster_size }}'

  - name: update group_vars with server variables
    blockinfile:
      path: ./group_vars/nomad/vars
      marker: "# {mark} INSTANCE VARS"
      block: |
        #jinja2: trim_blocks:False
        nomad_data:
          server:
            {%- for count in range(cluster_size) %}
            - nomad-server-{{ count + 1 }}:
              instance:
                hostname: compute-{{ count +1 }}
                ip_pub1: {{ server_info.results[count].instance.ipv4[0] }}
                ip_priv1: {{ server_info.results[count].instance.ipv4[1] }}
            {%- endfor %}        

  - name: test connectivity
    ping: 
    with_items: "{{ item.instance.ipv4[0] }}"
    loop: "{{ server_info.results }}"

  - name: update inventory
    blockinfile:
      path: ./hosts
      marker: "# {mark} NOMAD LINODES"
      block: |
        #jinja2: trim_blocks:False
        [nomad_cluster]
        localhost ansible_connection=local user=root
        {%- for count in range(cluster_size) %}
        {{ server_info.results[count + 1].instance.ipv4[0] }}
        {%- endfor %}

  - name: wait for port 22 to become open
    wait_for:
      port: 22
      host: '{{ item.instance.ipv4[0] }}'
      search_regex: OpenSSH
      delay: 10
    connection: local
    with_items: "{{ server_info.results }}"